datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                  String          @id @default(cuid())
  name                String?
  email               String          @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  Authenticator       Authenticator[]
  likes               PostLike[]
  friendshipsSent     Friendship[]    @relation("friendshipsSent")
  friendshipsReceived Friendship[]    @relation("friendshipsReceived")
  posts               Post[]          @relation("userPosts")
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  chatSent            Chat[]          @relation("chatSent")
  chatReceived        Chat[]          @relation("chatReceived")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Friendship {
  id          String @id @default(cuid())
  requester   User   @relation("friendshipsSent", fields: [requesterId], references: [id])
  requesterId String

  addressee   User   @relation("friendshipsReceived", fields: [addresseeId], references: [id])
  addresseeId String

  status    FriendshipStatus @default(PENDING)
  createdAt DateTime         @default(now())
  userId    String?

  @@unique([requesterId, addresseeId])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}

model Post {
  id        String     @id @default(cuid())
  content   String
  author    User       @relation("userPosts", fields: [authorId], references: [id])
  authorId  String
  likes     PostLike[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model PostLike {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Chat {
  id         Int      @id @default(autoincrement())
  message    String
  senderId   String
  sender     User?    @relation("chatSent", fields: [senderId], references: [id])
  receiverId String
  receiver   User?    @relation("chatReceived", fields: [receiverId], references: [id])
  userId     String?
  createdAt  DateTime

  @@index([id, createdAt])
}
